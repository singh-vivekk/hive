Analytical Function in Hive:
---------------------------------------------------

(3,111,'SSE','IT',123465),
(4,222,'SSE','IT',123498),
(5,222,'SE','NW',6634),
(6,222,'SSE','IT',51234),
(7,333,'TL','NW',36234),
(8,333,'SSE','IT',3434),
(9,333,'SSE','IT',54234)

emp_id int, cmp_id int, desg string, dept string, salary bigint

select emp_id, cmp_id, desg, dept, LEAD(emp_id) over(partition by dept order by salary) from employee;

I/P:
select * from employee;

1	111	TL	IT	12345
2	111	SSE	IT	1234
3	111	SSE	IT	123465
4	222	SSE	IT	123498
5	222	SE	NW	6634
6	222	SSE	IT	51234
7	333	TL	NW	36234
8	333	SSE	IT	3434
9	333	SSE	IT	54234

O/P:
2	111	SSE	IT	8
8	333	SSE	IT	1
1	111	TL	IT	6
6	222	SSE	IT	9
9	333	SSE	IT	3
3	111	SSE	IT	4
4	222	SSE	IT	NULL
5	222	SE	NW	7
7	333	TL	NW	NULL

select emp_id, cmp_id, desg, dept, LAG(emp_id) over(partition by dept order by salary) from employee;

O/P:
2	111	SSE	IT	NULL
8	333	SSE	IT	2
1	111	TL	IT	8
6	222	SSE	IT	1
9	333	SSE	IT	6
3	111	SSE	IT	9
4	222	SSE	IT	3
5	222	SE	NW	NULL
7	333	TL	NW	5


hive> select emp_id, cmp_id, desg, dept, LEAD(emp_id,2) over(partition by dept order by salary) from employee

Here, 2 is the offset no.
O/P:
2	111	SSE	IT	1
8	333	SSE	IT	6
1	111	TL	IT	9
6	222	SSE	IT	3
9	333	SSE	IT	4
3	111	SSE	IT	NULL
4	222	SSE	IT	NULL
5	222	SE	NW	NULL
7	333	TL	NW	NULL
Time taken: 32.681 seconds, Fetched: 9 row(s)

hive> select emp_id, cmp_id, desg, dept, FIRST_VALUE(emp_id) over(partition by dept order by salary) from employee;

2	111	SSE	IT	2
8	333	SSE	IT	2
1	111	TL	IT	2
6	222	SSE	IT	2
9	333	SSE	IT	2
3	111	SSE	IT	2
4	222	SSE	IT	2
5	222	SE	NW	5
7	333	TL	NW	5


select emp_id, cmp_id, desg, dept, RANK() over(partition by dept order by salary) from employee;

2	111	SSE	IT	1
8	333	SSE	IT	2
1	111	TL	IT	3
6	222	SSE	IT	4
9	333	SSE	IT	5
3	111	SSE	IT	6
4	222	SSE	IT	7
5	222	SE	NW	1
7	333	TL	NW	2

(10,333,'SSE','IT',3434),
(11,333,'SSE','IT',54234)

select emp_id, cmp_id, desg, dept, DENSE_RANK() over(partition by dept order by salary) from employee;

2	111	SSE	IT	1
8	333	SSE	IT	2
1	111	TL	IT	3
6	222	SSE	IT	4
9	333	SSE	IT	5
3	111	SSE	IT	6
4	222	SSE	IT	7
5	222	SE	NW	1
7	333	TL	NW	2
Time taken: 31.219 seconds, Fetched: 9 row(s)


select emp_id, cmp_id, desg, dept, ROW_NUMBER() over(partition by dept order by salary) from employee;

OK
2	111	SSE	IT	1
8	333	SSE	IT	2
1	111	TL	IT	3
6	222	SSE	IT	4
9	333	SSE	IT	5
3	111	SSE	IT	6
4	222	SSE	IT	7
5	222	SE	NW	1
7	333	TL	NW	2
Time taken: 33.922 seconds, Fetched: 9 row(s)

--------------
Sliding WINDOW:
--------------
What Is a Moving Average?
The MOVING AVERAGE is a time series technique for analyzing and determining trends in data. Sometimes called rolling means, rolling averages, or running averages, they are calculated as the mean of the current and a specified number of immediately preceding values for each point in time. The main idea is to examine how these averages behave over time instead of examining the behavior of the original or raw data points.

------------------------------------------------------------------------------------------------------------------------------
(ROWS | RANGE) BETWEEN (UNBOUNDED | [num]) PRECEDING AND ([num] PRECEDING | CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)
(ROWS | RANGE) BETWEEN CURRENT ROW AND (CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)
(ROWS | RANGE) BETWEEN [num] FOLLOWING AND (UNBOUNDED | [num]) FOLLOWING
------------------------------------------------------------------------------------------------------------------------------

SELECT
  `date`, `stock`, `close`,AVG(`close`) OVER `w` AS `mavg`
	FROM `t_stock`
		WINDOW `w` AS (PARTITION BY `stock` ORDER BY `date`
               ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)


SELECT
    date, sales, AVG(sales) OVER wind AS avg_sales
      FROM sales_table
        WINDOW wind AS (PARTITION BY sales ORDER BY date
            ROWS BETWEEN 29 PRECEDING AND CURRENT ROW);

Repo link: https://github.com/singh-vivekk/hive/tree/master/hiveProject/Queries
